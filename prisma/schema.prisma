// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model HealthCheck {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  statusCode Int
  resMsg     String
}

model Gender {
  id           Int      @id @default(autoincrement())
  abbreviation String   @unique
  description  String
  User         User[]
  createdAt    DateTime @default(now()) @db.Timestamptz()
  updatedAt    DateTime @updatedAt
}

model User {
  id                String             @id @default(uuid()) @db.Uuid
  firstName         String
  lastName          String
  avatar            String             @default("")
  githubId          String?
  discordId         String?
  twitterId         String?
  linkedinId        String?
  email             String             @unique
  gender            Gender?            @relation(fields: [genderId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  genderId          Int?
  countryCode       String?
  timezone          String
  comment           String?
  createdAt         DateTime           @default(now()) @db.Timestamptz()
  updatedAt         DateTime           @updatedAt
  voyageTeamMembers VoyageTeamMember[]
}

model Voyage {
  id          Int          @id @default(autoincrement())
  number      String       @unique
  startDate   DateTime     @db.Timestamptz()
  endDate     DateTime     @db.Timestamptz()
  createdAt   DateTime     @default(now()) @db.Timestamptz()
  updatedAt   DateTime     @updatedAt
  voyageTeams VoyageTeam[]
  Sprint      Sprint[]
}

model Sprint {
  id          Int           @id @default(autoincrement())
  voyageId    Int
  number      Int
  startDate   DateTime      @db.Timestamptz()
  endDate     DateTime      @db.Timestamptz()
  createdAt   DateTime      @default(now()) @db.Timestamptz()
  updatedAt   DateTime      @updatedAt
  voyage      Voyage        @relation(fields: [voyageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  TeamMeeting TeamMeeting[]
}

model VoyageStatus {
  id                Int                @id @default(autoincrement())
  name              String             @unique
  description       String
  createdAt         DateTime           @default(now()) @db.Timestamptz()
  updatedAt         DateTime           @updatedAt
  voyageTeams       VoyageTeam[]
  voyageTeamMembers VoyageTeamMember[]
}

model Tier {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String
  createdAt   DateTime     @default(now()) @db.Timestamptz()
  updatedAt   DateTime     @updatedAt
  voyageTeams VoyageTeam[]
}

model VoyageTeam {
  id            Int           @id @default(autoincrement())
  voyage        Voyage?       @relation(fields: [voyageId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  voyageId      Int?
  name          String        @unique
  status        VoyageStatus? @relation(fields: [statusId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  statusId      Int?
  repoUrl       String
  repoUrlBE     String?
  deployedUrl   String?
  deployedUrlBE String?
  tier          Tier?         @relation(fields: [tierId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  tierId        Int?
  endDate       DateTime
  createdAt     DateTime      @default(now()) @db.Timestamptz()
  updatedAt     DateTime      @updatedAt

  voyageTeamMembers  VoyageTeamMember[]
  teamTechStackItems TeamTechStackItem[]
  TeamMeeting        TeamMeeting[]
}

model VoyageRole {
  id                Int                @id @default(autoincrement())
  name              String             @unique
  description       String
  createdAt         DateTime           @default(now()) @db.Timestamptz()
  updatedAt         DateTime           @updatedAt
  voyageTeamMembers VoyageTeamMember[]
}

model VoyageTeamMember {
  id           Int           @id @default(autoincrement())
  member       User          @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId       String        @db.Uuid
  voyageTeam   VoyageTeam    @relation(fields: [voyageTeamId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  voyageTeamId Int
  voyageRole   VoyageRole?   @relation(fields: [voyageRoleId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  voyageRoleId Int?
  status       VoyageStatus? @relation(fields: [statusId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  statusId     Int?
  hrPerSprint  Float
  createdAt    DateTime      @default(now()) @db.Timestamptz()
  updatedAt    DateTime      @updatedAt

  teamTechStackItemVotes TeamTechStackItemVote[]
  projectIdeas           ProjectIdea[]
  ProjectIdeaVotes       ProjectIdeaVote[]
  TeamResource           TeamResource[]
  ProjectFeature         ProjectFeature[]

  @@unique(fields: [userId, voyageTeamId], name: "userVoyageId")
}

model ProjectIdea {
  id               Int               @id @default(autoincrement())
  contributedBy    VoyageTeamMember? @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  userId           Int?
  title            String
  description      String
  vision           String
  createdAt        DateTime          @default(now()) @db.Timestamptz()
  updatedAt        DateTime          @updatedAt
  projectIdeaVotes ProjectIdeaVote[]
}

model ProjectIdeaVote {
  id            Int               @id @default(autoincrement())
  votedBy       VoyageTeamMember? @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  userId        Int?
  ProjectIdea   ProjectIdea?      @relation(fields: [projectIdeaId], references: [id], onDelete: Cascade)
  projectIdeaId Int?
  createdAt     DateTime          @default(now()) @db.Timestamptz()
  updatedAt     DateTime          @updatedAt
}

model TechStackCategory {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  description    String
  createdAt      DateTime        @default(now()) @db.Timestamptz()
  updatedAt      DateTime        @updatedAt
  techStackItems TechStackItem[]
}

model TechStackItem {
  id             Int                 @id @default(autoincrement())
  name           String              @unique
  category       TechStackCategory?  @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  categoryId     Int?
  createdAt      DateTime            @default(now()) @db.Timestamptz()
  updatedAt      DateTime            @updatedAt
  teamTechStacks TeamTechStackItem[]
}

model TeamTechStackItem {
  id                     Int                     @id @default(autoincrement())
  tech                   TechStackItem           @relation(fields: [techId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  techId                 Int
  voyageTeam             VoyageTeam              @relation(fields: [voyageTeamId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  voyageTeamId           Int
  createdAt              DateTime                @default(now()) @db.Timestamptz()
  updatedAt              DateTime                @updatedAt
  teamTechStackItemVotes TeamTechStackItemVote[]

  @@unique(fields: [voyageTeamId, techId], name: "teamIdTechId")
}

model TeamTechStackItemVote {
  id           Int               @id @default(autoincrement())
  teamTech     TeamTechStackItem @relation(fields: [teamTechId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  teamTechId   Int
  votedBy      VoyageTeamMember? @relation(fields: [teamMemberId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  teamMemberId Int?
  createdAt    DateTime          @default(now()) @db.Timestamptz()
  updatedAt    DateTime          @updatedAt

  @@unique(fields: [teamTechId, teamMemberId], name: "userTeamStackVote")
}

model TeamResource {
  id           Int               @id @default(autoincrement())
  teamMemberId Int?
  url          String
  title        String
  createdAt    DateTime          @default(now()) @db.Timestamptz()
  updatedAt    DateTime          @updatedAt
  addedBy      VoyageTeamMember? @relation(fields: [teamMemberId], references: [id], onDelete: SetNull)
}

model FeatureCategory {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String
  createdAt       DateTime         @default(now()) @db.Timestamptz()
  updatedAt       DateTime         @updatedAt
  projectFeatures ProjectFeature[]
}

model ProjectFeature {
  id                Int               @id @default(autoincrement())
  teamMemberId      Int?
  featureCategoryId Int?
  description       String
  createdAt         DateTime          @default(now()) @db.Timestamptz()
  updatedAt         DateTime          @updatedAt
  category          FeatureCategory?  @relation(fields: [featureCategoryId], references: [id], onDelete: SetNull)
  addedBy           VoyageTeamMember? @relation(fields: [teamMemberId], references: [id], onDelete: SetNull)
}

model TeamMeeting {
  id           Int        @id @default(autoincrement())
  sprintId     Int
  sprint       Sprint     @relation(fields: [sprintId], references: [id], onDelete: Cascade)
  voyageTeamId Int
  voyageTeam   VoyageTeam @relation(fields: [voyageTeamId], references: [id], onDelete: Cascade)
  title        String
  dateTime     DateTime
  meetingLink  String
  createdAt    DateTime   @default(now()) @db.Timestamptz()
  updatedAt    DateTime   @updatedAt
  Agenda       Agenda[]
}

model Agenda {
  id            Int         @id @default(autoincrement())
  teamMeetingId Int
  teamMeeting   TeamMeeting @relation(fields: [teamMeetingId], references: [id], onDelete: Cascade)
  title         String
  description   String
  status        Boolean
  createdAt     DateTime    @default(now()) @db.Timestamptz()
  updatedAt     DateTime    @updatedAt
}
