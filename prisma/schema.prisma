// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Gender {
  id           String   @id @default(uuid())
  abbreviation String   @unique
  description  String
  User         User[]
  createdAt    DateTime @default(now()) @db.Timestamptz()
}

model User {
  id               String             @id @default(uuid())
  firstName        String
  lastName         String
  githubId         String
  discordId        String
  twitterId        String?
  linkedinId       String?
  email            String             @unique
  gender           Gender?            @relation(fields: [genderId], references: [id])
  genderId         String?
  countryCode      String?
  timeZone         String
  comment          String?
  createdAt        DateTime           @default(now()) @db.Timestamptz()
  VoyageTeamMember VoyageTeamMember[]
  ProjectIdea      ProjectIdea[]
}

model Voyage {
  id         String       @id @default(uuid())
  number     String       @unique
  startDate  DateTime     @db.Timestamptz()
  endDate    DateTime     @db.Timestamptz()
  createdAt  DateTime     @default(now()) @db.Timestamptz()
  VoyageTeam VoyageTeam[]
}

model VoyageStatus {
  id               String             @id @default(uuid())
  name             String             @unique
  description      String
  createdAt        DateTime           @default(now()) @db.Timestamptz()
  VoyageTeam       VoyageTeam[]
  VoyageTeamMember VoyageTeamMember[]
}

model Tier {
  id          String       @id @default(uuid())
  name        String       @unique
  description String
  createdAt   DateTime     @default(now()) @db.Timestamptz()
  VoyageTeam  VoyageTeam[]
}

model VoyageTeam {
  id            String       @id @default(uuid())
  voyage        Voyage       @relation(fields: [voyageId], references: [id])
  voyageId      String
  name          String       @unique
  status        VoyageStatus @relation(fields: [statusId], references: [id])
  statusId      String
  repoUrl       String
  repoUrlBE     String?
  deployedUrl   String?
  deployedUrlBE String?
  tier          Tier         @relation(fields: [tierId], references: [id])
  tierId        String
  endDate       DateTime
  createdAt     DateTime     @default(now()) @db.Timestamptz()

  VoyageTeamMember VoyageTeamMember[]
  ProjectIdea      ProjectIdea[]
}

model VoyageRole {
  id               String             @id @default(uuid())
  name             String             @unique
  description      String
  createdAt        DateTime           @default(now()) @db.Timestamptz()
  VoyageTeamMember VoyageTeamMember[]
}

model VoyageTeamMember {
  member       User         @relation(fields: [userId], references: [id])
  userId       String
  voyageTeam   VoyageTeam   @relation(fields: [voyageTeamId], references: [id])
  voyageTeamId String
  voyageRole   VoyageRole   @relation(fields: [voyageRoleId], references: [id])
  voyageRoleId String
  status       VoyageStatus @relation(fields: [statusId], references: [id])
  statusId     String
  hrPerSprint  Float
  createdAt    DateTime     @default(now()) @db.Timestamptz()

  @@id([userId, voyageTeamId])
}

model ProjectIdea {
  id            String     @id @default(uuid())
  contributedBy User       @relation(fields: [userId], references: [id])
  userId        String
  voyageTeam    VoyageTeam @relation(fields: [voyageTeamId], references: [id])
  voyageTeamId  String
  title         String
  description   String
  vision        String
  voteCount     Int        @default(0)
  createdAt     DateTime   @default(now()) @db.Timestamptz()
}

model TechStackCategory {
  id            String          @id @default(uuid())
  name          String          @unique
  description   String
  createdAt     DateTime        @default(now()) @db.Timestamptz()
  TechStackItem TechStackItem[]
}

model TechStackItem {
  id         String            @id @default(uuid())
  name       String            @unique
  category   TechStackCategory @relation(fields: [categoryId], references: [id])
  categoryId String
  createdAt  DateTime          @default(now()) @db.Timestamptz()
}

model TeamTechStack {
  id   String @id @default(uuid())
  name String
}
